<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JuliaJia's coder paradise]]></title>
  <link href="http://www.juliajia.com/atom.xml" rel="self"/>
  <link href="http://www.juliajia.com/"/>
  <updated>2016-06-04T16:08:17+08:00</updated>
  <id>http://www.juliajia.com/</id>
  <author>
    <name><![CDATA[Julia Jia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[爱车日记（一）]]></title>
    <link href="http://www.juliajia.com/blog/20160603/Post-%E7%88%B1%E8%BD%A6%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <updated>2016-06-03T05:40:00+08:00</updated>
    <id>http://www.juliajia.com/blog/20160603/Post-爱车日记（一）</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">2016年5月27日-2016年6月2日</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">2016年6月4日</a></li>
</ul>

<h1 id="section">2016年5月27日-2016年6月2日</h1>

<p>爱车棕宝大胖于2016年5月27日提车，一直开到现在一共跑了252公里，胖子就是吃的多，300多块钱的油吃了一半多了，打算今天去给大胖加个200元的餐^_^，大胖整体性能不错，除了起步有点肉以外（胖子嘛，不能期待更多）其他我都十分的满意。</p>

<p>作为一个新手（5月9日才拿的驾照），提车三天就出了一个小小的车祸，在侨香路那边刹车没踩住，大胖的雾灯被撞进去了，眼眶附近留了点疤痕，把我给心疼的555555….送到4S店小修了一下，伤痕不是很明显，很庆幸自己买了棕色的大胖。有了这次疏忽，最近几天开车小心了许多。</p>

<p>打算500公里的时候打开发动机盖子看看大胖有木有漏油，顺带看看机油尺上的油是否清亮，检查完毕以后亲自给大胖洗个澡澡 美美容（虽然是个汉子，但是也要美美哒….）</p>

<p>今天去加油，路上堵得要命，大胖又吃了一小格油，这死胖子真是能吃！！！！！</p>

<h1 id="section-1">2016年6月4日</h1>

<p>今天一大早（6点30）就开着大胖到公司，一路上大胖都十分的稳定，自己的驾驶技术也日趋成熟，对路况的掌握也越来越好了。打算今天把支架带回去，明天把行车记录仪给大胖装起来，多一点保障。另外今天把之前就安装好的GPS防盗器注册到APP平台上了，打算下班的时候试试远程断油断电功能，嘻嘻(<em>^__^</em>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读传习录有感（一）]]></title>
    <link href="http://www.juliajia.com/blog/20160602/Post-%E8%AF%BB%E4%BC%A0%E4%B9%A0%E5%BD%95%E6%9C%89%E6%84%9F%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <updated>2016-06-02T05:40:00+08:00</updated>
    <id>http://www.juliajia.com/blog/20160602/Post-读传习录有感（一）</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">新民与亲民之区别</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">义在心中</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">心既是理</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">天理之心 人欲之心</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">真君子 伪君子</a></li>
</ul>

<h1 id="section">新民与亲民之区别</h1>

<p>朱子所注“作新民”之新民乃自新之民，何谓自新？世说新语解释如下：自新，指自己改正错误，重新做人，意谓自强不息，日有心得。然，亲民并非新民，亲乃爱之意，由此可见亲民乃是爱护人民教化人民之意。孔子云：“修己以安百姓”，“修己”便是“作新民”，“作新民”便是“明明德”，“明明德”便能“安百姓”而“安百姓”便是“亲民”。由此可见朱子所言“在亲民”是“新民” 这种说法是有偏颇的，是错误的理解。</p>

<h1 id="section-1">义在心中</h1>

<p>孟子曰：“恻隐之心，人皆有之；羞恶之心，人皆有之； 恭敬之心，人皆有之；是非之心，人皆有之。恻隐之心，仁也；羞 恶之心，义也；恭敬之心，礼也；是非之心智也。仁义礼智，非 由外铄我也，我固有之也，弗思耳矣。故曰：‘求则得之，舍则 失之。’”，是故至善乃是心之本体，追求之便可得，放弃之则遗失。由此可见义本在心中，只有通过“明明德”的方式修身养性达到“精深专一”的境界才能拨云见日，觅得真义。</p>

<h1 id="section-2">心既是理</h1>

<p>《大学》云：“如恶恶臭，如好好色。”，人闻到恶臭必然会讨厌，并不需要去研究恶臭的道理之后再去讨厌，人看到美丽的事物必然欢喜，并不需要去研究美丽事物的道理之后再去欢喜。所以道理其实是在每个人的心中，无需从外部去求得，只需要去除心中的障，道理便能自现，如果从外部去寻求真理，就如同舍弃树根而去求枝叶一般不可取。</p>

<h1 id="section-3">天理之心 人欲之心</h1>

<p>心本只有一个，被人欲所干扰所隐藏的心是人欲之心，摒弃人欲返璞归真的心是天理之心即道心。因此自修的意义就在于扫净人欲，把原本纯极之心找回。</p>

<h1 id="section-4">真君子 伪君子</h1>

<p>一直以来心中就存在两个疑问：何谓真君子？何谓伪君子？</p>

<p>小人很好辨认，唯独君子是真是伪，是不能通过做的事儿说的话所能辨认出来的。今天阅读《传习录》有种茅塞顿开的感觉，真君子做事是发自真心，是从心出发自然做出正确的行为，这就是真正的“知行合一”，反观伪君子做事如同戏子演戏一般，并不是从心发出的而是迫于外界压力演给大家看的。</p>

<p>《大学》云：“富润屋，德润身，心广体胖，故君子必诚其意。”，意诚则心正，心正则为人处事正，无需表演亦无压抑之感。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【龍馬君读书笔记系列之一】Programming in C：第一至第四章（理论笔记）]]></title>
    <link href="http://www.juliajia.com/blog/20150708/programming-in-c-01.html"/>
    <updated>2015-07-08T20:39:12+08:00</updated>
    <id>http://www.juliajia.com/blog/20150708/programming-in-c-01</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、入门</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、基础知识</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">三、编译并运行第一个程序</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">四、变量、数据类型和算数表达式</a></li>
</ul>

<h3 id="section">一、入门</h3>
<blockquote>
  <ul>
    <li>1.学习C需要尽可能多的去实验</li>
    <li>2.代码可读性很重要</li>
  </ul>
</blockquote>

<h3 id="section-1">二、基础知识</h3>
<blockquote>
  <ul>
    <li>1.程序设计
      <ul>
        <li>1.计算机系统能够执行的基本指令的集合，我们称之为计算机的指令集</li>
        <li>2.用来解决某个具体问题的计算机指令集和，我们称之为计算机程序</li>
        <li>3.用来解决某个具体问题的方法，我们称之为算法</li>
        <li>4.使用计算机解决制定问题的流程是：
          <ul>
            <li>step 1：找到解决该问题的方法，也就是找到算法</li>
            <li>step 2：在用一段计算机程序去表达/实现这个算法
<!--more--></li>
          </ul>
        </li>
      </ul>
    </li>
    <li>2.高级编程语言
      <ul>
        <li>1.使用高级编程语言，我们不再需要了解具体计算机系统的结构。</li>
        <li>2.高级编程语言可移植性高</li>
        <li>3.高级编程语言需要编译器—一个用来将高级编程语言编写的程序翻译成特定计算机系统能理解的机器指令的程序。</li>
      </ul>
    </li>
    <li>3.操作系统
      <ul>
        <li>1.操作系统被用来控制计算机系统所有操作的程序</li>
        <li>2.操作系统必须管理计算机的所有资源并负责运行所有的程序</li>
      </ul>
    </li>
    <li>4.编译程序
      <ul>
        <li>1.编译程序的基本步骤：
          <ul>
            <li>step 1：用文本编辑器将C语言编写的程序输入到计算机系统的文件中。</li>
            <li>step 2：使用gcc prog1.c的命令告诉计算机开始编译</li>
            <li>step 3：编译器收到编译指示后，它首先检查源程序的每一条语句，看他是否符合语言的语法和词法。如果有错误，编译器会报错给用户并停止运行。</li>
            <li>step 4：如果编译器没有发现任何的语法和词法的错误，它将会把高级编程语言编写的源程序翻译为较低级的形式—汇编语言程序</li>
            <li>step 5：然后再将汇编语言程序翻译为实际的机器指令并生成目标文件（通常.o结尾）</li>
            <li>step 6：生成目标文件以后编译器会执行连接（连接的主要作用是将目标代码转化为具体的计算机系统上实际的可执行程序）的操作</li>
            <li>step 7：连接器会把刚刚生成的可执行代码保存在系统的可执行文件中（通常.out结尾）
  至此编译程序的完整流程就走完了</li>
          </ul>
        </li>
        <li>2.程序运行时，计算机会按照顺序执行程序中的指令，除非遇到中止/挂起等指令。</li>
      </ul>
    </li>
    <li>5.解释型语言
      <ul>
        <li>1.python就是一门典型的解释型语言</li>
        <li>2.解释型语言没有编译器只有解释器，它通过解释器一边分析源程序一边执行。因此解释型程序会比编译型程序执行得慢，但是解释型语言调试起来容易一些。</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="section-2">三、编译并运行第一个程序</h3>
<blockquote>
  <ul>
    <li>1.万年“Hello World!”</li>
  </ul>
</blockquote>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>prog1.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <ul>
    <li>2.编译prog1.c
      <ul>
        <li>gcc prog1.c -o prog1</li>
      </ul>
    </li>
    <li>3.运行prog1
      <ul>
        <li>prog1</li>
      </ul>
    </li>
    <li>4.prog1代码解析
      <ul>
        <li>1.#include <stdio.h>
</stdio.h>          <ul>
            <li>stdio.h是标准输入输出头文件，里面有很多已经编写好的标准函数提供给程序员使用，有点像python的模块。</li>
          </ul>
        </li>
        <li>2.int main(void)
          <ul>
            <li>定义了一个名为main的函数（在C语言中，main就是主函数），并定义了这个函数的type是整型。</li>
          </ul>
        </li>
        <li>3.{}
          <ul>
            <li>C语言通过{}来表明函数块范围。</li>
          </ul>
        </li>
        <li>4.void
          <ul>
            <li>表示函数main不需要任何参数</li>
          </ul>
        </li>
        <li>5.printf();
          <ul>
            <li>printf函数是C语言的一个标准库函数，这个函数把传递给它的参数打印到屏幕上。</li>
            <li>\n是换行符</li>
          </ul>
        </li>
        <li>6.return 0;
          <ul>
            <li>表示函数结束并返回一个0值作为结束状态。</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>5.显示变量的值
      <ul>
        <li>1.prog2代码解析
          <ul>
            <li>1.int a;
              <ul>
                <li>定义一个名为a的整型变量</li>
              </ul>
            </li>
            <li>2.a = 50 + 25;
              <ul>
                <li>这个表达式的含义是给变量a赋值</li>
              </ul>
            </li>
            <li>3.%i
              <ul>
                <li>%i表示这里使用一个整型的变量值，变量值由,号后面的参数提供。</li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>prog2.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">    <span class="n">a</span> <span class="o">=</span> <span class="mi">50</span> <span class="o">+</span> <span class="mi">25</span><span class="p">;</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The sum of 50 and 25 is %i</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <ul>
    <li>6.注释
      <ul>
        <li>1./* 我是注释 */
          <ul>
            <li>我能换行注释</li>
          </ul>
        </li>
        <li>2.//我也是注释
          <ul>
            <li>我只能单行注释</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="section-3">四、变量、数据类型和算数表达式</h3>
<blockquote>
  <ul>
    <li>1.使用变量
      <ul>
        <li>1.合法的变量名
          <ul>
            <li>1.字母或下划线开头</li>
            <li>2.由字母、下划线以及数字0-9组成</li>
            <li>3.不能使用保留关键字</li>
          </ul>
        </li>
        <li>2.最好使用有意义的长短合适的变量名</li>
      </ul>
    </li>
    <li>2.数据类型与常量
      <ul>
        <li>1.整型—int（%i）
          <ul>
            <li>1.long—长整型（目前为止long int跟int其实没有差别都是32位）</li>
            <li>2.long long—超长整型支持64位</li>
            <li>3.short—短整型（16位以上）
              <ul>
                <li>short整型没有常量表达式，只能通过普通整型数的格式化输入符号前面放一个字母h，比如%hi来进行输出。（了解即可，这种东西现在完全没用武之地。。。。）</li>
              </ul>
            </li>
          </ul>
        </li>
        <li>2.其他数据类型—float/double/char/_bool
          <ul>
            <li>1.float—用来储存浮点数（%g）</li>
            <li>2.double—-用来储存双精度浮点数（%g）</li>
            <li>3.char—-用来储存单个字符（%c）</li>
            <li>4._bool—用来储存布尔值（i%）</li>
          </ul>
        </li>
        <li>3.常量
          <ul>
            <li>在C语言中，任何数字，单个字符或者字符串都被看作是常量。
书里面做了一个很有意思的数据类型实验，等实验篇的时候我们来详细的看一看！</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【从零开始部署octopress系列之二】octopress定制化部署(1)]]></title>
    <link href="http://www.juliajia.com/blog/20150701/octopress-02.html"/>
    <updated>2015-07-01T15:33:48+08:00</updated>
    <id>http://www.juliajia.com/blog/20150701/octopress-02</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、前提说明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、基本配置的修改</a></li>
</ul>

<h3 id="section">一、前提说明</h3>
<blockquote>
  <ul>
    <li>git bash在octopress目录下操作</li>
    <li>所有文件必须是UTF8不带BOM格式的！可以使用notepad++进行转换。</li>
    <li>以后我们将把octopress目录称为根（/）目录</li>
    <li>//后面的内容表示注释</li>
    <li>后面的步骤里如没有特殊说明将参照以上说明</li>
  </ul>
</blockquote>

<!--more-->

<h3 id="section-1">二、基本配置的修改</h3>
<blockquote>
  <ul>
    <li>1.修改域名、作者以及网站标题
      <ul>
        <li>修改配置文件/_config.yml
          <ul>
            <li>url: http://www.juliajia.com        //这里填写你的站点地址也就是域名</li>
            <li>title: JuliaJia’s coding paradise    //这里填写你站点的名称</li>
            <li>subtitle: 凤凰涅槃，三年不飞三年不鸣，要飞一飞冲天，要鸣一鸣惊人！      //这里填写站点的描述，但是一般大家都喜欢写喜欢的名言或者自己的志向</li>
            <li>author: Julia Jia     //这里写站点的作者或者说博主姓名</li>
            <li>keywords: 编程 大数据 算法 python C C++ 机器学习 深度学习 hadoop spark JAVA scala  //这里填写你这个站点的关键字，方便搜索引擎来爬。</li>
            <li>description: 这里是JuliaJia的禅修之地，主要潜心研究机器学习、深度学习以及大数据有关的所有技术，也写一些自己的感悟体会和生活趣事儿。   //对这个博客站点进行简单的描述，这里的内容也是给搜索引擎看的。</li>
            <li>这里需要注意的是，所有的冒号必须是英文冒号，并且冒号后面一定要有一个空格！切记！</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>2.修改文章链接形式
      <ul>
        <li>修改配置文件/_config.yml
          <ul>
            <li>permalink: /blog/:year:month:day/:title.html       //这里填写博客页面的web链接格式</li>
            <li>这么修改了以后页面链接就不会显得层级很多了</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>3.修改markdown文件后缀
      <ul>
        <li>octopress默认日志文件的后缀是markdown，我们可以修改配置文件让这个后缀更简短一些，还能针对文件的不同用途设定不同的后缀</li>
        <li>修改配置文件/rakefile
          <ul>
            <li>new_post_ext = “md”      //设置post文件后缀为md</li>
            <li>new_page_ext = ‘html’    //设置page文件后缀为html</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>4.修改默认markdown解释器
      <ul>
        <li>修改配置文件/Gemfile
          <ul>
            <li>在文件末尾添加一行：
              <ul>
                <li>gem ‘kramdown’</li>
              </ul>
            </li>
            <li>然后在git bash中执行命令：
              <ul>
                <li>bundle install</li>
              </ul>
            </li>
          </ul>
        </li>
        <li>修改配置文件/_config.yml
          <ul>
            <li>把以下内容删除：
              <ul>
                <li>markdown: rdiscount</li>
                <li>rdiscount:
                  <ul>
                    <li>extensions:
                      <ul>
                        <li>autolink</li>
                        <li>footnotes</li>
                        <li>smart</li>
                      </ul>
                    </li>
                  </ul>
                </li>
              </ul>
            </li>
            <li>然后再添加下面这句话：
              <ul>
                <li>markdown: kramdown</li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>5.添加MathJax支持
      <ul>
        <li>修改配置文件/source/_includes/custom/head.html
          <ul>
            <li>添加如下代码</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- MathJax --&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">    <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span><span class="s1">&#39;$&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s2">&quot;\\(&quot;</span><span class="p">,</span><span class="s2">&quot;\\)&quot;</span><span class="p">]</span> <span class="p">],</span>
</span><span class="line">      <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">      <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Queue</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">all</span> <span class="o">=</span> <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">getAllJax</span><span class="p">(),</span> <span class="nx">i</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">all</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">all</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">SourceElement</span><span class="p">().</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; has-jax&#39;</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>
</span><span class="line">   <span class="na">src=</span><span class="s">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至此，博客的基本配置就完成了，当然离最终的样子还差很多，不过饭要一口一口的吃，事儿要一件一件的做，我们下一篇开始讲解导航栏和侧边栏的定制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【从零开始部署octopress系列之一】octopress安装与部署]]></title>
    <link href="http://www.juliajia.com/blog/20150630/octopress-01.html"/>
    <updated>2015-06-30T16:43:07+08:00</updated>
    <id>http://www.juliajia.com/blog/20150630/octopress-01</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、写这个系列的起因</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、部署之前需要做的事情</a></li>
  <li><a href="#octopress" id="markdown-toc-octopress">三、octopress安装与部署</a></li>
</ul>

<h3 id="section">一、写这个系列的起因</h3>
<p>接触octopress是源于一直以来我就想有个自己的博客，但是一直不想四处找稳定的空间（X宝的坑太多，国外的太贵）所以也就作罢，直到后来偶然在知乎上搜到一篇文章里面讲到如何利用github建立自己的博客，我多年想建个人博客的愿望又被激了起来，于是乎就开始了漫长的折腾。</p>

<p>起先本来是用hexo不过我不喜欢那样的feel，当然萝卜青菜各有所爱，hexo有它自身的优势只不过我不喜欢罢了，后来翻来覆去的查找各种博客模板最终google到了octopress，刚开始部署按照教程去走也还算顺利，在本地看到了自带模板的模样，直觉告诉我 I like it!
于是乎就喜滋滋的开始了octopress折腾之路，一路上披荆斩棘解决各种坑，几乎把google和百度都查了个遍，以至于凡是带octopress关键字的我都进去瞅过，终于有了现在这个博客，虽然还是很简陋，但是以我从来没有接触ruby（弄这个博客之前ruby是什么我都不知道。。。）、git（知道，但是从来没用过。。。）、html、css、JavaScript的情况来看，这已经是我能做的最好看的样子了，嘿嘿嘿！
<!--more--></p>

<p>介于我折腾的如此痛苦（部署期间我翻阅了各种跟octopress相关的博客，但是要么写的不全面，要么是在MAC下或者linux下的部署步骤不适合windows，要么插件按照他写的步骤完全没法用—年代久远等因素），所以我想把我折腾的整个过程总结出来，写一个全面的系列，这样一来方便我自己后续查阅，二来给后面用octopress的人一个参考，你按照我的步骤去做就能做出我现在博客的样子，省去了很多折腾的时间（虽然折腾的过程也很有乐趣，嘿嘿）以上就是我为什么要写这个系列的原因。</p>

<h3 id="section-1">二、部署之前需要做的事情</h3>

<blockquote>
  <ul>
    <li><code>step 1：github_page建立</code>
      <ul>
        <li><code>首先你得有个github账号（github.com 不要问我怎么注册的。。。。如果这都要人教，我觉得你可以告别使用octopress了）</code></li>
        <li><code>然后你要创建一个名为yourname.github.io的库，这里的yourname一定要确保跟你用户名一模一样。</code></li>
        <li><code>最后到https://msysgit.github.io/下载一个git进行安装（同样不要问我怎么安装。。。。）</code></li>
      </ul>
    </li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>step 2：安装Ruby</code>
      <ul>
        <li><code>到http://rubyinstaller.org/downloads/下载rubyinstallers以及其对应版本的DevKit</code></li>
        <li><code>先安装rubyinstall并设置好环境变量（正常情况下，你安装完毕他会自动部署好环境变量，但是有的时候不生效，你可以在PATH结尾处再弄一个，记住一定要;号结尾），然后把DevKit解压到C盘下，并设置环境变量</code></li>
        <li><code>如果你随便打开一个文件夹，空白处右键打开git bash输入ruby然后按下tab键能自动出来ruby.exe的选项，证明你环境变量设置成功了。</code></li>
        <li><code>在git bash里进入DevKit的目录进行DevKit的安装</code>
          <ul>
            <li><code>cd /c/devkit</code></li>
            <li><code>ruby.exe dk.rb init</code></li>
            <li><code>ruby.exe dk.rb install</code></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>step 3：购买域名并绑定（可选）</code>
      <ul>
        <li><code>我的域名是在goddady买的，安全，而且可以使用支付宝（不过前提是不能使用超低折扣的折扣码，目前中国人能使用的折扣码只有8.99美元/年的）。别问我折扣码怎么得，自行百度。</code>
          <ul>
            <li><code>补充一些注意事项：</code>
              <ul>
                <li><code>注册时用户填写信息时一定要输入正确的邮箱名字，否则修改十分麻烦。</code></li>
                <li><code>买完域名之后一定要记得去自己的邮箱查看激活邮件，否则域名激活不了。</code></li>
              </ul>
            </li>
          </ul>
        </li>
        <li><code>买了域名以后记得到my account下去查看域名是否已经在你账户下</code></li>
        <li><code>DNS服务设置可以参考这个帖子http://www.admin5.com/article/20131014/527502.shtml</code></li>
        <li><code>DNS智能解析绑定</code>
          <ul>
            <li><code>到DNSPOD（https://www.dnspod.cn/）上点击产品中心里的域名解析</code></li>
            <li><code>点击添加域名然后填入你在goddady购买的域名</code></li>
            <li><code>需要注意的点：</code>
              <ul>
                <li><code>CNAME的记录值后面有个.号，这个一定要有，要注意！</code></li>
                <li><code>A的记录值要照着写，这个是github的地址。</code></li>
                <li><code>另外默认存在的NS的记录值要原封不动的填到goddady的DNS绑定服务器选项里，前面的帖子里有写照着填就好了。</code></li>
              </ul>
            </li>
            <li><code>具体设置可以参考下图：</code></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<p><img src="http://7xjw6q.com1.z0.glb.clouddn.com/DNS解析设置.png" /></p>

<h3 id="octopress">三、octopress安装与部署</h3>
<blockquote>
  <ul>
    <li><code>下载标准的octopress模板：</code>
      <ul>
        <li><code>git clone git://github.com/imathis/octopress.git octopress</code></li>
        <li><code>gem install bundler</code></li>
      </ul>
    </li>
    <li><code>移除国外ruby源添加淘宝ruby源：</code>
      <ul>
        <li><code>gem sources --remove https://rubygems.org/</code></li>
        <li><code>gem sources -a http://ruby.taobao.org/</code></li>
        <li><code>gem sources -l</code></li>
        <li><code>一定要确保只有一个源</code></li>
      </ul>
    </li>
    <li><code>安装各种关联包</code>
      <ul>
        <li><code>bundle install</code>
          <ul>
            <li><code>这里一步可能会持续很长时间，因为会报各种关联包缺失，你按照他的提示安装关联包即可，一直装到bundle install提示安装完成为止</code></li>
          </ul>
        </li>
      </ul>
    </li>
    <li><code>安装octopress默认主题</code>
      <ul>
        <li><code>rake install</code></li>
      </ul>
    </li>
    <li><code>设置github_page库地址</code>
      <ul>
        <li><code>rake setup_github_pages</code>
          <ul>
            <li><code>这里填写的url是你自己的page库，格式如下：</code>
              <ul>
                <li><code>git@github.com:yourname/yourname.github.io.git</code></li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li><code>设置CNAME</code>
      <ul>
        <li><code>echo '你的域名' &gt;&gt; source/CNAME      //如果你有自己的域名可以这样操作绑定到github的二级域名上。</code></li>
      </ul>
    </li>
    <li><code>生成静态页面</code>
      <ul>
        <li><code>rake generate</code></li>
      </ul>
    </li>
    <li><code>本地测试</code>
      <ul>
        <li><code>rake preview</code></li>
        <li><code>打开本地浏览器访问http://localhost:4000，如果能出来octopress默认页面就证明octopress本地库部署OK并且静态页面生成没有问题。</code></li>
      </ul>
    </li>
    <li><code>push静态页面到你的github_page库上</code>
      <ul>
        <li><code>rake deploy</code></li>
      </ul>
    </li>
    <li><code>备份本地octopress库到github_page库的source分支上</code>
      <ul>
        <li><code>git add .</code></li>
        <li><code>git commit -am "YY-MM-DD-hh:mm"</code></li>
        <li><code>git push origin source</code></li>
      </ul>
    </li>
    <li><code>注意：以上的操作都要在octopress目录下做</code></li>
    <li><code>访问你的域名看看是否能正常访问（域名绑定和解析需要等一段时间）</code></li>
  </ul>
</blockquote>

<p>至此，整个octopress的安装与部署就完成了。但是默认的界面比较土，而且功能单一，所以后面将会逐步逐步的去给它添加插件以及修改框架，把它变成属于你的独一无二的博客。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【saltstack】saltstack初步安装与部署]]></title>
    <link href="http://www.juliajia.com/blog/20150630/saltstack-01.html"/>
    <updated>2015-06-30T16:30:42+08:00</updated>
    <id>http://www.juliajia.com/blog/20150630/saltstack-01</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#saltstack-master" id="markdown-toc-saltstack-master">一、saltstack-master服务器安装</a></li>
  <li><a href="#saltstack-minion" id="markdown-toc-saltstack-minion">二、saltstack-minion服务器安装</a></li>
  <li><a href="#saltstack-minion-1" id="markdown-toc-saltstack-minion-1">三、saltstack-minion服务器部署</a></li>
  <li><a href="#saltstack-master-1" id="markdown-toc-saltstack-master-1">四、saltstack-master服务器部署</a></li>
</ul>

<h3 id="saltstack-master">一、saltstack-master服务器安装</h3>
<blockquote>
  <ul>
    <li>step 1：部署epel源
      <ul>
        <li>CentOS6-64bit：
          <ul>
            <li>rpm -Uvh http://mirrors.yun-idc.com/epel/6Server/x86_64/epel-release-6-8.noarch.rpm</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>step 2：安装salt-master服务器
      <ul>
        <li>CentOS6-64bit：
          <ul>
            <li>yum -y install salt-master
<!--more--></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="saltstack-minion">二、saltstack-minion服务器安装</h3>
<blockquote>
  <ul>
    <li>step 1：部署epel源
      <ul>
        <li>CentOS6-64bit：
          <ul>
            <li>rpm -Uvh http://mirrors.yun-idc.com/epel/6Server/x86_64/epel-release-6-8.noarch.rpm</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>step 2：安装salt-minion服务器
      <ul>
        <li>CentOS6-64bit：
          <ul>
            <li>yum -y install salt-minion</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="saltstack-minion-1">三、saltstack-minion服务器部署</h3>
<blockquote>
  <ul>
    <li>step 1：修改minion服务器配置文件
      <ul>
        <li>编辑/etc/salt/minion文件
          <ul>
            <li>master: 【这里填写master的主机名】</li>
            <li>PS：master前面一定要加两个空格，不然服务起不来。</li>
          </ul>
        </li>
        <li>编辑/etc/hosts
          <ul>
            <li>【master的IP】 【master的主机名】</li>
            <li>PS：注意这里的master主机名一定要和minion配置文件里配置的名称一致</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>step 2：启动salt-minion服务
      <ul>
        <li>/etc/init.d/salt-minion start</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="saltstack-master-1">四、saltstack-master服务器部署</h3>
<blockquote>
  <ul>
    <li>step 1：设置master日志
      <ul>
        <li>编辑/etc/salt/master
          <ul>
            <li>log_level: debug</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>step 2：启动salt-master服务
      <ul>
        <li>/etc/init.d/salt-master start</li>
      </ul>
    </li>
  </ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【计算机导论】第二课 条件分支语句和循环语句]]></title>
    <link href="http://www.juliajia.com/blog/20150627/Post-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA%20%E7%AC%AC%E4%BA%8C%E8%AF%BE%20%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5.html"/>
    <updated>2015-06-27T20:24:01+08:00</updated>
    <id>http://www.juliajia.com/blog/20150627/Post-计算机导论 第二课 分支语句和循环语句</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、课程目标</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、运算符和运算对象</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">三、声明</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">四、分支语句与循环语句</a></li>
</ul>

<h3 id="section">一、课程目标</h3>
<ul>
  <li>计算的根本的具体内容</li>
  <li>一些运算符和运算对象方面的内容<strong>（课程重点）</strong></li>
  <li>写代码时关键的模块也就是声明<strong>（课程重点）</strong></li>
  <li>一系列简单的程序的介绍尤其是条件分支语句和循环语句（又叫迭代语句）<strong>（课程重点）</strong> 
<!--more--></li>
</ul>

<hr />

<h3 id="section-1">二、运算符和运算对象</h3>
<ul>
  <li>运算对象</li>
</ul>

<blockquote>
  <ul>
    <li><code>运算对象分为以下三种类型</code>
      <ul>
        <li>数字类型
          <ul>
            <li>数字是用来描述数值的</li>
          </ul>
        </li>
        <li>字符串类型
          <ul>
            <li>字符串是变现文本信息的基本方式</li>
          </ul>
        </li>
        <li>布尔类型</li>
      </ul>
    </li>
  </ul>
</blockquote>

<ul>
  <li>类型的转换</li>
</ul>

<blockquote>
  <ul>
    <li>在python中可以使用类型转换符进行类型的转换</li>
    <li>类型转换的必要性：
      <ul>
        <li>如果我想从一种特定的方式把两个东西结合到一块，我需要确定给了运算符它想要的输入，也就是说只有类型统一了运算符才能正常的去处理。</li>
      </ul>
    </li>
    <li>关于类型的检查：
      <ul>
        <li>有的语言会很严格的执行类型检查的工作（比如python），还有一些语言则没有这部分功能（比如LISP）</li>
        <li>类型的检查会使得排错更加便利。</li>
      </ul>
    </li>
  </ul>
</blockquote>

<ul>
  <li>表达式是由运算符和运算对象组成的。</li>
  <li>运算符</li>
</ul>

<blockquote>
  <ul>
    <li>当你写代码的时候应该养成以下编码习惯：
      <ul>
        <li>检查运算符或者程序来看看它们在不同的条件下呈现的行为是什么</li>
        <li>如果在程序中你想要约束参数或者运算符的运算对象时，你需要一个规范来确定python做了正确的事情。</li>
      </ul>
    </li>
    <li>运算优先级：
      <ul>
        <li>在相同条件下，指数操作的优先级高于乘法和除法</li>
        <li>乘法和除法的优先级高于加法和减法</li>
        <li>当你想要改变既定优先级时，请用括号</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="section-2">三、声明</h3>
<ul>
  <li>赋值声明</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>关于赋值声明的简单例子.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>    <span class="o">//</span><span class="err">把变量</span><span class="n">X</span><span class="err">和数值</span><span class="mi">3</span><span class="err">链接起来</span>
</span><span class="line"><span class="n">y</span> <span class="o">=</span> <span class="mi">3</span>    <span class="o">//</span><span class="err">把变量</span><span class="n">y</span><span class="err">和数值</span><span class="mi">3</span><span class="err">链接起来</span>
</span><span class="line"><span class="n">z</span> <span class="o">=</span> <span class="n">x</span>    <span class="o">//</span><span class="err">把变量</span><span class="n">z</span><span class="err">和变量</span><span class="n">x</span><span class="err">的数值链接起来，注意这里是和变量</span><span class="n">x</span><span class="err">的数值关联起来不是和变量</span><span class="n">x</span><span class="err">关联起来</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>变量</li>
</ul>

<blockquote>
  <ul>
    <li>之前一课讲过变量是用来存储数值的，所以变量会从数值那里继承类型的属性。因此变量的绑定是动态的，或者说变量的类型是动态的，是随着数值的变化而变化的。
      <ul>
        <li><strong>不要反复无常的改变变量的类型</strong></li>
      </ul>
    </li>
    <li>在什么地方可以应用变量？
      <ul>
        <li>在需要用到数值的任何地方都可以使用变量</li>
      </ul>
    </li>
  </ul>
</blockquote>

<ul>
  <li>声明的描述</li>
</ul>

<blockquote>
  <ul>
    <li>声明就是能被语言解释的正确合法的命令，比如前面所描述的赋值的声明还有下面的代码所展现的print的声明等</li>
  </ul>
</blockquote>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>关于声明的描述.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>    <span class="o">//</span><span class="n">Creat</span> <span class="n">variable</span> <span class="n">x</span> <span class="ow">and</span> <span class="n">assign</span> <span class="n">value</span> <span class="mi">3</span> <span class="n">to</span> <span class="n">it</span>
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>    <span class="o">//</span><span class="n">Bind</span> <span class="n">x</span> <span class="n">to</span> <span class="n">value</span> <span class="mi">9</span>
</span><span class="line"><span class="k">print</span> <span class="n">x</span>
</span><span class="line"><span class="n">n</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;Enter a number: &#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>编码风格的介绍</li>
</ul>

<blockquote>
  <ul>
    <li>优秀的编码风格包含以下两点：
      <ul>
        <li>写好注释
          <ul>
            <li>好的注释能帮助你或者其他阅读这段代码的人了解这段代码是用来做什么的，它会导致怎样的结果，从而便于更好的理解程序本身。</li>
          </ul>
        </li>
        <li>选择易明白的变量名称
          <ul>
            <li>尽量用有意义的变量名字，但要注意保留关键词，每个语言都会有各自的保留关键词（比如python的print，这个就是个保留关键词），要注意避免使用这些作为变量名。</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="section-3">四、分支语句与循环语句</h3>
<ul>
  <li>分支语句</li>
</ul>

<blockquote>
  <ul>
    <li>分支语句就是一个能基于一些条件判断来改变指令顺序的语句，判断通常是基于布尔值来进行的，true就执行false就跳过。</li>
  </ul>
</blockquote>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>一个简单的分支语句.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">==</span> <span class="n">x</span><span class="p">:</span>    <span class="o">//</span><span class="err">判断</span><span class="n">X</span><span class="err">是奇数还是偶数</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;Even&quot;</span>    <span class="o">//</span><span class="err">偶数打印</span><span class="n">Even</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;Odd&quot;</span>    <span class="o">//</span><span class="err">奇数打印</span><span class="n">Odd</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <ul>
    <li>代码中的冒号标识了一块指令集的开始，它表明了下面的指令要当做一整块来对待（在python里用相同的缩进来区分不同的指令集）</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>分支语句的格式：
  if <判断表达式>:
      指令集1
  else:
      指令集2</判断表达式></li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>使用条件语句两个重要的点：
      <ul>
        <li>1.当我们写代码的时候，在写判断方法时，应该为每一个可能的程序路径都设计一个特别的判断方法</li>
        <li>2.判断条件应该尽量写得全面（必要时可以使用布尔运算符进行条件的组合）
          <ul>
            <li>布尔类型：
              <ul>
                <li>布尔运算符：’and’，’or’，’not’</li>
                <li>布尔值：’true’,’false’</li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<ul>
  <li>循环语句</li>
</ul>

<blockquote>
  <ul>
    <li>如何实现迭代
      <ul>
        <li>一个简单的迭代流程图：</li>
      </ul>
    </li>
  </ul>
</blockquote>

<p><img src="http://7xjw6q.com1.z0.glb.clouddn.com/第二课流程图-01.png" title="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【计算机导论】第一课 课程目标 数据类型 运算以及变量]]></title>
    <link href="http://www.juliajia.com/blog/20150624/Post-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA%20%E7%AC%AC%E4%B8%80%E8%AF%BE%20%E8%AF%BE%E7%A8%8B%E7%9B%AE%E6%A0%87%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E8%BF%90%E7%AE%97%E4%BB%A5%E5%8F%8A%E5%8F%98%E9%87%8F.html"/>
    <updated>2015-06-24T19:59:00+08:00</updated>
    <id>http://www.juliajia.com/blog/20150624/Post-计算机导论 第一课 课程目标 数据类型 运算以及变量</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、课程目标</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、课程基本信息</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">三、计算思维的概念和方法（核心）</a></li>
  <li><a href="#python" id="markdown-toc-python">四、关于Python的一些简单介绍</a></li>
</ul>

<h3 id="section">一、课程目标</h3>
<ul>
  <li>了解计算在解决技术问题中所扮演的角色</li>
  <li>使用计算思维的基本工具来编写小规模的代码<strong>（写）</strong></li>
  <li>使用计算工具的语言用来理解别人编写的程序<strong>（读）</strong></li>
  <li>了解计算的基本能力和局限以及他们的代价<strong>（知道你能干什么，不能干什么）</strong></li>
  <li>把科学问题转换进计算机的框架之内<strong>（应用）</strong>
<!--more--></li>
</ul>

<hr />

<h3 id="section-1">二、课程基本信息</h3>
<ul>
  <li>语言：<code>python</code></li>
  <li>课程重应用,不重死记硬背！</li>
  <li>提出问题很重要！</li>
  <li>记笔记的过程就是锻炼的过程！</li>
</ul>

<hr />

<h3 id="section-2">三、计算思维的概念和方法（核心）</h3>
<ul>
  <li>核心理念：像一个<code>计算机科学家</code>一样思考！</li>
  <li>计算模式思维：</li>
  <li>什么是计算相关？</li>
  <li>什么是知识？</li>
</ul>

<blockquote>
  <ul>
    <li><code>知识分为两种类型：</code></li>
  </ul>
</blockquote>

<blockquote>
  <p><code>1.陈述性的知识</code></p>
</blockquote>

<blockquote>
  <p><em><code>所谓陈述性的知识就是用叙述事实的方式来思考它。比如定理、原理等，它不会帮你计算，它顶多帮你检查正确性，对你的操作做标杆/参考。</code></em></p>
</blockquote>

<blockquote>
  <p><code>2.程序性的知识</code></p>
</blockquote>

<blockquote>
  <p><em><code>所谓程序性的知识就是对推论过程的描述，比如猜想、测试等，他会让你知道如何寻找定理/原理。它是方法，是关于怎么办的知识。</code></em></p>
</blockquote>

<ul>
  <li>我怎么样才能建立计算机程序去捕捉一系列的计算呢?</li>
</ul>

<blockquote>
  <ul>
    <li><code>1.用来解决某种专门的问题—固定程序式计算机，比如计算器、密码机等 </code></li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>2.用某种方法来实现想法的设备—存储程序式计算机 </code></li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>3.计算机的核心：在初始指令序列上建造描述、方法的一个概念</code></li>
  </ul>
</blockquote>

<ul>
  <li>语言的三个维度：</li>
</ul>

<blockquote>
  <ul>
    <li><code>1.这个语言是一个高级还是低级的语言-----你能有多靠近机器的核心呢？</code>
      <ul>
        <li><code>低级语言：曾经称之为假设编程，它只是出于用基本要素把一些数据碎片从记忆存储器的一个地方通过简单的操作来转到另外一个地方。</code></li>
        <li><code>高级语言：设计者制造了丰富的原始要素</code></li>
      </ul>
    </li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>2.这个语言的目标群体是比较大众还是有特定面向群体的</code>
      <ul>
        <li><code>也就是说这个基本集合是不是支持比较多的程序或者是不是面向某一特定种类的程序的</code></li>
      </ul>
    </li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>3.这个语言是编译语言还是解释语言</code>
      <ul>
        <li><code>解释语言----需要写一些叫做源码的东西，你写的东西会经过一个简单的过滤器然后解释器会处理你的源码，解释器会产生一个逐条读取你源码的控制流，然后返回一个输出结果。因此解释器在运行程序的时候会直接的对你的代码进行操作。</code></li>
        <li><code>编译语言----你会经过一个中间的步骤，在这种语言里输入源码后，先经过过滤器或者编译器检查后他会创建一个叫做目标代码的东西，这有两点好处:</code>
          <ul>
            <li><code>1.可以帮助你发现程序中的bug</code></li>
            <li><code>2.把你的代码在运行之前转换为更有效率的指令的集合</code></li>
          </ul>
        </li>
        <li><code>解释语言和编译语言之间的区别：</code>
          <ul>
            <li><code>解释语言调试起来很容易，但是这种语言不够快</code></li>
            <li><code>编译语言很快，但是调试起来麻烦</code></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="python">四、关于Python的一些简单介绍</h3>
<ul>
  <li>python：高级语言、面向广泛、解释语言</li>
  <li>作为本课程的主打语言，我们需要为它建立“食谱”</li>
</ul>

<blockquote>
  <ul>
    <li><code>得到问题然后将问题分解为计算步骤，这些指令集可以让我们看到这个过程</code></li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>为了达到这个目的，我们需要描述：包括程序基本的东西以及怎么在这种语言中做我们想做的事情并和计算机交互。</code>
      <ul>
        <li><code>语言的元素：</code>
          <ul>
            <li><code>1.语法与语义的区分：</code>
              <ul>
                <li><code>1.语法</code>
                  <ul>
                    <li><code>语法就是这个语言的合理表示是什么。语法会告诉你怎么把写好的表达式合理的放在一起描述</code></li>
                  </ul>
                </li>
              </ul>
            </li>
            <li><code>2.语义</code>
              <ul>
                <li><code>1.static的语义</code>
                  <ul>
                    <li><code>static的语义主要讲述哪些程序是有意义的，static的语义有助于帮助我们决定哪些表达哪部分的代码实际上是有意义的。</code></li>
                  </ul>
                </li>
                <li><code>2.full的语义</code>
                  <ul>
                    <li><code>full的语义描述程序到底有什么意义或者说full的语义会告诉我们当我运行程序的时候会发生什么。</code></li>
                  </ul>
                </li>
              </ul>
            </li>
          </ul>
        </li>
        <li><code>程序的一些基本元素：</code>
          <ul>
            <li><code>1.数据类型：</code>
              <ul>
                <li><code>1.数字</code>
                  <ul>
                    <li><code>1.int（整型）</code></li>
                    <li><code>2.float（浮点型）</code></li>
                  </ul>
                </li>
              </ul>
            </li>
            <li><code>2.字符串</code>
              <ul>
                <li><code>字符串格式：'abc'</code></li>
              </ul>
            </li>
            <li><code>3.运算符</code>
              <ul>
                <li><code>简单的+-*/</code></li>
              </ul>
            </li>
            <li><code>4.变量</code>
              <ul>
                <li><code>变量的作用就是把值存储起来。</code></li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

]]></content>
  </entry>
  
</feed>
