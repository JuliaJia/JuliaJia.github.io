<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: from 0 to 1 | JuliaJia's coder paradise]]></title>
<<<<<<< HEAD
  <link href="http://www.juliajia.com/blog/tags/from-0-to-1/atom.xml" rel="self"/>
  <link href="http://www.juliajia.com/"/>
  <updated>2016-06-02T22:01:38+08:00</updated>
  <id>http://www.juliajia.com/</id>
=======
  <link href="http://juliajia.github.io/blog/tags/from-0-to-1/atom.xml" rel="self"/>
  <link href="http://juliajia.github.io/"/>
  <updated>2015-07-10T17:29:31+08:00</updated>
  <id>http://juliajia.github.io/</id>
>>>>>>> 674d77a10cec5018d88a39581245c4fd5a92f5f8
  <author>
    <name><![CDATA[Julia Jia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[【龍馬君读书笔记系列之一】Programming in C：第一至第四章（理论笔记）]]></title>
    <link href="http://www.juliajia.com/blog/20150708/programming-in-c-01.html"/>
    <updated>2015-07-08T20:39:12+08:00</updated>
    <id>http://www.juliajia.com/blog/20150708/programming-in-c-01</id>
=======
    <title type="html"><![CDATA[【龍馬君从零开始学习python-flask系列之二】python-flask模板的使用方法以及jinja2的一些简单语法]]></title>
    <link href="http://juliajia.github.io/blog/20150710/python-flask-02.html"/>
    <updated>2015-07-10T15:21:59+08:00</updated>
    <id>http://juliajia.github.io/blog/20150710/python-flask-02</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、应用模板的简单案例</a></li>
  <li><a href="#jinja2" id="markdown-toc-jinja2">二、jinja2的控制语句</a></li>
  <li><a href="#jinja2-1" id="markdown-toc-jinja2-1">三、jinja2的循环语句</a></li>
  <li><a href="#jinja2-2" id="markdown-toc-jinja2-2">四、jinja2的模板继承属性</a></li>
</ul>

<h3 id="section">一、应用模板的简单案例</h3>
<blockquote>
  <ul>
    <li>1.如果没有模板会怎样？
我们之前已经部署好了python-flask的基础开发环境并成功的完成了万里长征第一步：万年Hello World的展示。不过我们学习python-flask可不是仅仅只是为了展示Hello World的，所以我们会美观我们的页面我们会设置很多页面属性，所以当我们想对这个程序做扩展的时候，我们会这样做：
<figure class='code'><figcaption><span>app/view.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">app</span>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="n">index</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">=</span> <span class="p">{</span> <span class="err">‘</span><span class="n">nickname</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">Miguel</span><span class="err">’</span> <span class="p">}</span>   <span class="c">#fake user</span>
</span><span class='line'>  <span class="k">return</span> <span class="err">‘’’</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="n">Home</span> <span class="n">Page</span><span class="o">&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Hello</span><span class="p">,</span><span class="s">&#39;&#39;&#39; + user[&#39;nickname&#39;] + &#39;&#39;&#39;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">’’’</span>
</span></code></pre></td></tr></table></div></figure>
<!--more-->
保存退出以后再刷新一下浏览器，你应该可以看到Hello，Miguel出现，并且标题是Home Page！先别太激动哦，这还只是简单的一点小小的改动，现在想象一下，如果我们需要写各种复杂的页面的时候，它们跟应用程序代码挤在一起岂不是要乱成粥了？光是想想头就莫名开始痛起来，因此不把网页代码跟应用程序分开是不行的，而且你也不希望把前端网页工程师的工作也做了吧^_^！因此python-flask设计者设计出了模板，我们接下来看看我们使用模板的话，刚才的代码是怎样的！</p>

<blockquote>
  <ul>
    <li>2.如何使用模板
首先我们来写一个模板，代码如下：</li>
  </ul>
</blockquote>

<p>注意：由于博客不支持jinja2的代码所以我这边只能靠截图来展现代码了！</p>

<p>emacs app/templates/index.html</p>

<p><img src="http://7xjw6q.com1.z0.glb.clouddn.com/python-flask-02-01.png" title="Stupid ET #2" ></p>

<p>聪明的你一定发现了，除了和以外这段代码跟刚刚我们添加到view.py里的没什么太大的区别！没错，其实这两个也不陌生，它们就是变量！那么它们的值是什么呢？？？？别急，我们接下来看看view.py
<figure class='code'><figcaption><span>app/view.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">render_template</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">app</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@app.route</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="n">index</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="p">{</span> <span class="err">‘</span><span class="n">nickname</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">Miguel</span><span class="err">’</span> <span class="p">}</span>    <span class="c">#  fake user</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="err">“</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">title</span> <span class="o">=</span> <span class="err">“</span><span class="n">Home</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">user</span> <span class="o">=</span> <span class="n">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
这里跟刚才不同的地方就在于render_template函数的引入，这是个什么东东呢？其实说白了就是基于你模板名称以及设定的变量信息，他帮你完成替换工作，现在你明白刚刚那两个变量有什么用了吧！（需要注意的是，在内部，其实render_template调用了jinja2模板引擎的，由jinja2来做替换工作）</p>

<h3 id="jinja2">二、jinja2的控制语句</h3>
<p>讲到模板就不得不提jinja2，那么什么是jinja2呢？我搜索了一下，绝大部分介绍jinja2的都说它是仿照Django模板的python模板语言，看到这里什么是django？什么是模板语言？等等这些问题都涌了出来，不过我们这个系列是写python-flask的，所以不可以发散那么远，等以后有精力了，再去好好研究一下jinja2和django！</p>

<p>言归正传，我们来看看这个类Django的python模板语言—-Jinja2是如何去做控制的，我先提出一个问题，如果之前的代码里我少提供了一个变量会怎样？你一定会说，肯定会报错啊！没错，稍微有点开发经验的人都能猜到程序会报错，那么这段代码岂不是很死板，就不能智能的判断吗？如果用户没有提供就让程序使用默认字段代替呗！这里有个字眼—“判断”，呵呵，听到这个词，明显就是需要用到控制语句了，因此解决刚刚所说的问题解决办法就出来了，利用jinja2的控制语句进行判断何时执行默认的操作，代码如下：</p>

<p>emacs app/templates/index.html</p>

<p><img src="http://7xjw6q.com1.z0.glb.clouddn.com/python-flask-02-02.png" title="Stupid ET #2" ></p>

<p>保存代码（代码我就不解释了吧，如此清晰的语法，连我这种刚开始学习代码的二把刀都能看明白，我相信大家都能看明白是怎么回事儿）之后咱们去view.py把title参数给删除并运行run.py，看看是否会报错，最后刷新页面看看是否显示咱们指定的默认title了，如果你发现成功了的话，你可以想想如果user.nickname参数没有提供怎么办呢？动起手来改造一下，感受一下吧！！！！</p>

<h3 id="jinja2-1">三、jinja2的循环语句</h3>
<p>既然讲了控制，自然会讲到循环（为什么我要这么说，我也不知道，可能是最近看MIT的计算机导论课程看多了的关系吧！！原谅我吧！），循环顾名思义它就是一个环，只有满足指定条件它才会被打破，你可以想象你在跑圈，然后你给自己定义跑3圈停下，那么3圈就是指定条件（这个比喻形象吗？）！</p>

<p>看到这里很多人会觉得这玩意儿有什么用呢？我其实也不太懂，我一般只拿它来做遍历（我经常跟别人说我写过一个特别操蛋的程序，就是分布式的层层循环的去ping一万+的服务器来测试他们是否存活，原因嘛很简单，一次ping出来的结果往往是不准的，只有不断的去ping然后层层过滤ping不同的列表才是真正的ping不通的服务器，是不是很操蛋。。。。。），无论是遍历字典还是遍历列表还是遍历文件生成列表，所以我隐隐记得有大神说过算法牛逼的程序循环是非常少的（可能是我精分癌发作记错-_-d）！</p>

<p>我感觉我跑题了！！！！赶紧把思绪拉回来！！！！我们继续研究jinja2的循环语句，不管这个东西怎样，存在即合理，我们就要学习它！不为别的，就为把妹的时候也能多一点谈资（我感觉我好low ⊙ o ⊙ ）！要用到jinja2的循环我们必须改造一下我们的view.py脚本：
<figure class='code'><figcaption><span>app/view.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">render_template</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">app</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@app.route</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="n">index</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="p">{</span> <span class="err">‘</span><span class="n">nickname</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">Miguel</span><span class="err">’</span> <span class="p">}</span>    <span class="c">#  fake user</span>
</span><span class='line'>    <span class="n">posts</span> <span class="o">=</span> <span class="p">[</span> <span class="c"># fake array of posts</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="err">‘</span><span class="n">author</span><span class="err">’</span><span class="p">:</span> <span class="p">{</span> <span class="err">‘</span><span class="n">nickname</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">John</span><span class="err">’</span> <span class="p">},</span>
</span><span class='line'>            <span class="err">‘</span><span class="n">body</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">Beautiful</span> <span class="n">day</span> <span class="ow">in</span> <span class="n">Portland</span><span class="err">!’</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="err">‘</span><span class="n">author</span><span class="err">’</span><span class="p">:</span> <span class="p">{</span> <span class="err">‘</span><span class="n">nickname</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">Susan</span><span class="err">’</span> <span class="p">},</span>
</span><span class='line'>            <span class="err">‘</span><span class="n">body</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">The</span> <span class="n">Avengers</span> <span class="n">movie</span> <span class="n">was</span> <span class="n">so</span> <span class="n">cool</span><span class="err">!’</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="err">“</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">title</span> <span class="o">=</span> <span class="err">“</span><span class="n">Home</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">user</span> <span class="o">=</span> <span class="n">user</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">posts</span> <span class="o">=</span> <span class="n">posts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
心细的你一定发现了，这里多了个posts，它是个列表里面有两个字典元素，但是循环在哪呢？？？？别急别急嘛！刚刚我不是说过了么，我一般拿循环就是遍历个字典啊列表神马的，所以说我们要先给循环准备遍历的素材嘛！现在素材准备好了，我们可以开始写循环了：</p>

<p>emacs app/templates/index.html</p>

<p><img src="http://7xjw6q.com1.z0.glb.clouddn.com/python-flask-02-03.png" title="Stupid ET #2" ></p>

<p>代码完成！现在把目光聚集到之间的那句代码，通过for循环遍历了posts列表里的元素（其实就两个），然后取出这两个元素的key_value（因为这两个元素是字典），最后利用key_value组合成一句话：某某人说了某某话，所以大家可以猜到显示结果就是John和Susan分别在屏幕上说了两句屁话。。。。至此简单的循环就介绍得差不多了，想要知道高级用法，第一手段：google 第二手段：百度 第三手段：等我学到那里吧！</p>

<h3 id="jinja2-2">四、jinja2的模板继承属性</h3>
<p>不知道你们有没有发现我们有好多代码都是重复利用的，难道我们每写一个页面都要复制粘贴吗？NO！我们这么聪（shu）明(lan)机（cheng）智（xing）的人怎么能容忍这些重复操作呢！设计jinja2的大牛们也和你我一样，因此他们就搞了个模板继承的属性，让重复利用的代码单独做个模板，想要用的时候继承一下就好了，这种充（lan）满（ai）智（huan）慧（zhe）结（fu）晶（yin）的工具我们怎么能不会呢？下面我们就来看个栗子：
背景介绍：我们需要做一个导航栏，然后希望这个导航栏呢，在每个模板中都使用父模板（请允许我这样叫它）代码如下：</p>

<p>emacs app/templates/base.html</p>

<p><img src="http://7xjw6q.com1.z0.glb.clouddn.com/python-flask-02-04.png" title="Stupid ET #2" ></p>

<blockquote>
  <ul>
    <li>可以看到插入父模板只需要两个步骤：
      <ul>
        <li>step 1：告知父模板的名字</li>
        <li>step 2：用定义好的block包裹该页面代码即可（这里的页面代码指的是唯一的、不需要重复利用的）</li>
      </ul>
    </li>
  </ul>
</blockquote>

<p>至此python-flask模板的一些使用方法和jinja2的一些简单语法我们就搞完了，下篇我们将学习flask-wtf表单，敬请期待！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【龍馬君从零开始学习python-flask系列之一】部署python-flask并运行Hello World!]]></title>
    <link href="http://juliajia.github.io/blog/20150710/python-flask-01.html"/>
    <updated>2015-07-10T15:21:13+08:00</updated>
    <id>http://juliajia.github.io/blog/20150710/python-flask-01</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#python-flask" id="markdown-toc-python-flask">一、部署python-flask的环境</a></li>
  <li><a href="#python-flask-1" id="markdown-toc-python-flask-1">二、部署python-flask基本环境</a></li>
  <li><a href="#hello-world" id="markdown-toc-hello-world">三、Hello World</a></li>
</ul>

<h3 id="python-flask">一、部署python-flask的环境</h3>
<blockquote>
  <ul>
    <li>操作系统：Ubuntu14.04-64bit</li>
    <li>编辑器：Emacs24.3</li>
    <li>Python版本：2.7
<!--more--></li>
  </ul>
</blockquote>

<h3 id="python-flask-1">二、部署python-flask基本环境</h3>
<blockquote>
  <ul>
    <li>1.部署flask的基础环境
      <ul>
        <li>sudo apt-get install python-virtualenv     //安装python的虚拟环境</li>
        <li>mkdir /data/python-flask</li>
        <li>cd /data/python-flask</li>
        <li>virtualenv flask    //构建flask虚拟环境</li>
      </ul>
    </li>
    <li>2.安装flask和flask的扩展：
      <ul>
        <li>flask/bin/pip install flask</li>
        <li>flask/bin/pip install flask-login</li>
        <li>flask/bin/pip install flask-openid</li>
        <li>flask/bin/pip install flask-mail</li>
        <li>flask/bin/pip install flask-sqlalchemy</li>
        <li>flask/bin/pip install sqlalchemy-migrate</li>
        <li>flask/bin/pip install flask-whooshalchemy</li>
        <li>flask/bin/pip install flask-wtf</li>
        <li>flask/bin/pip install flask-babel</li>
        <li>flask/bin/pip install guess_language</li>
        <li>flask/bin/pip install flipflop</li>
        <li>flask/bin/pip install coverage</li>
      </ul>
    </li>
    <li>3.创建web开发文件夹：
      <ul>
        <li>mkdir app</li>
        <li>mkdir app/static</li>
        <li>mkdir app/templates</li>
        <li>mkdir tmp</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="hello-world">三、Hello World</h3>
<blockquote>
  <ul>
    <li>1.创建一个简单的初始化脚本__init__.py
<figure class='code'><figcaption><span>app/<strong>init</strong>.py</li></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="mf">2.</span><span class="err">创建一个视图函数脚本</span><span class="n">views</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">python</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">app</span>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="err">‘</span><span class="o">/</span><span class="n">index</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">“</span><span class="n">Hello</span> <span class="n">World</span><span class="err">!”</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="mf">3.</span><span class="err">创建启动</span><span class="n">WEB</span><span class="err">服务器的脚本</span><span class="n">run</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">python</span> <span class="o">/</span><span class="n">data</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">flask</span><span class="o">/</span><span class="n">run</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="c">#!flask/bin/python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">app</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
&gt; * 4.给这个启动脚本添加可执行权限
&gt;     * chmod a+x run.py</p>

<blockquote>
  <ul>
    <li>5.执行这个启动脚本
      <ul>
        <li>./run.py</li>
      </ul>
    </li>
  </ul>
</blockquote>

<p>成功执行启动脚本以后就可以用浏览器访问http://localhost:5000，然后就能看到Hello World啦！这样简单的python-flask就部署完毕了。下一篇我们将学习python-flask的模板用法以及一些简单的jinja2的语法，敬请期待！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【龍馬君从零开始学C语言系列之二】Programming in C：第三章和第四章习题讲解（code实验笔记）]]></title>
    <link href="http://juliajia.github.io/blog/20150710/programming-in-c-02.html"/>
    <updated>2015-07-10T14:04:19+08:00</updated>
    <id>http://juliajia.github.io/blog/20150710/programming-in-c-02</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、第三章习题</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、第四章习题</a></li>
  <li><a href="#include-stdioh" id="markdown-toc-include-stdioh">include <stdio.h></stdio.h></a></li>
</ul>

<p>今天我们将《programming in C》第三章和第四章的coding习题讲一下（只讲我认为比较有意思的，那种特别特别简单的就不会讲了），以后也将会采用一天理论一天习题的方式去学习！</p>

<h3 id="section">一、第三章习题</h3>

<blockquote>
  <ul>
    <li>1.习题3.2  用C语言写一个程序，在终端上输出下面的句子：</li>
    <li>1.In C, lowercase letters are significant.</li>
    <li>2.main is where program execution begins.</li>
    <li>3.Opening and closing braces enclose program statements in a routine.</li>
    <li>4.All program statements must be terminated by a semicolon.
      <ul>
        <li>讲解：
          <ul>
            <li>这个题目很简单就是让你使用printf()函数打印出这四句话，注意换行符哦！题目答案代码如下：
<!--more-->
<figure class='code'><figcaption><span>prog3.2.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/li&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="mf">1.</span><span class="n">In</span> <span class="n">C</span><span class="p">,</span><span class="n">lowercase</span> <span class="n">letters</span> <span class="n">are</span> <span class="n">significant</span><span class="p">.</span><span class="err">\</span><span class="n">n2</span><span class="p">.</span><span class="n">main</span> <span class="n">is</span> <span class="n">where</span> <span class="n">program</span> <span class="n">execution</span> <span class="n">begins</span><span class="p">.</span><span class="err">\</span><span class="n">n3</span><span class="p">.</span><span class="n">Openning</span> <span class="n">and</span> <span class="n">closing</span> <span class="n">braces</span> <span class="n">enclose</span> <span class="n">program</span> <span class="n">statements</span> <span class="n">in</span> <span class="n">a</span> <span class="n">routine</span><span class="p">.</span><span class="err">\</span><span class="n">n4</span><span class="p">.</span><span class="n">All</span> <span class="n">program</span> <span class="n">statements</span> <span class="n">must</span> <span class="n">be</span> <span class="n">terminated</span> <span class="n">by</span> <span class="n">a</span> <span class="n">semicolon</span><span class="p">.</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="mf">2.</span><span class="err">习题</span><span class="mf">3.4</span> <span class="err">写出计算</span><span class="mi">87</span><span class="err">减去</span><span class="mi">15</span><span class="err">的</span><span class="n">C</span><span class="err">语言程序，并把结果和合适的提示信息打印出来。</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>     <span class="o">*</span> <span class="err">讲解：</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>         <span class="o">*</span> <span class="err">这个题目也很简单，就是定义</span><span class="mi">3</span><span class="err">个整型变量</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="err">，然后赋值</span><span class="mi">87</span><span class="err">给</span><span class="n">a</span><span class="err">赋值</span><span class="mi">15</span><span class="err">给</span><span class="n">b</span><span class="err">，最后定义一个关于</span><span class="n">c</span><span class="err">的表达式即可，答案代码如下：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">c</span> <span class="n">prog3</span><span class="mf">.4</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">87</span><span class="p">;</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">i</span> <span class="n">minus</span> <span class="o">%</span><span class="n">i</span> <span class="n">is</span> <span class="n">equal</span> <span class="n">to</span> <span class="o">%</span><span class="n">i</span><span class="o">!</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span> <span class="err">```</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;section-1&quot;</span><span class="o">&gt;</span><span class="err">二、第四章习题</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="mf">1.</span><span class="err">案例</span><span class="mf">4.5</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">开始讲第四章习题之前我们把昨天提到的一个有意思的案例讲讲，这个案例是关于整型数与浮点数之间的转换的，案例代码如下：</span>
</span></code></pre></td></tr></table></div></figure> c case4.5.c
#include <stdio.h></stdio.h></li>
      </ul>
    </li>
  </ul>
</blockquote>

<p>int main(void)
{
    float f1 = 123.125,f2;
    int i1,i2 = -150;
    char c = ‘a’;</p>

<pre><code>i1 = f1;
printf("%f assigned to an int produces %i\n", f1,i1);

f2 = i2;
printf("%i assigned to a float produces %f\n",i2,f2);

f1 = i2 / 100;
printf("%i divided by 100 produces %f\n", i2,f1);

f2 = i2 / 100.0;
printf("%i divided by 100.0 produces %f\n",i2,f2);

f2 = (float) i2 / 100;
printf("(float) %i divided by 100 produces %f\n",i2,f2);

return 0;
</code></pre>

<p>}
<code>
&gt; * 执行这段代码得到的结果如下，我们来一条条的讲：
&gt;     * 123.125000 assigned to an int produces 123
&gt;     * -150 assigned to a float produces -150.000000
&gt;     * -150 divided by 100 produces -1.000000
&gt;     * -150 divided by 100.0 produces -1.500000
&gt;     * (float) -150 divided by 100 produces -1.500000
&gt; * 第一条123.125000 assigned to an int produces 123对应的代码是：
</code> c case4.5.c
i1 = f1;
printf(“%f assigned to an int produces %i\n”, f1,i1);
<figure class='code'><figcaption><span>prog3.2.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">这个代码很简单，就是将一个浮点数</span><span class="mf">123.125</span><span class="err">赋值给一个整型变量</span><span class="n">i1</span><span class="err">，但是打印的结果我们发现仅仅只有</span><span class="mi">123</span><span class="err">，后面的</span><span class="mf">.125</span><span class="err">不见了，这说明在</span><span class="n">C</span><span class="err">语言中，如果我们把一个浮点数赋值给一个整型变量，那么浮点数的小数部分将会被舍去。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">第二条</span><span class="o">-</span><span class="mi">150</span> <span class="n">assigned</span> <span class="n">to</span> <span class="n">a</span> <span class="kt">float</span> <span class="n">produces</span> <span class="o">-</span><span class="mf">150.000000</span><span class="err">对应的代码是：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">c</span> <span class="n">case4</span><span class="mf">.5</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">f2</span> <span class="o">=</span> <span class="n">i2</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%i assigned to a float produces %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i2</span><span class="p">,</span><span class="n">f2</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">这段代码描述的是将一个整型数赋值给一个浮点变量，打印的结果我们发现</span><span class="o">-</span><span class="mi">150</span><span class="err">变成了</span><span class="o">-</span><span class="mf">150.000000</span><span class="err">，这说明在</span><span class="n">C</span><span class="err">语言中，如果我们把一个整型数赋值给一个浮点变量，浮点变量不会丢失任何精度，系统将会自动对其进行转换。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">第三条</span><span class="o">-</span><span class="mi">150</span> <span class="n">divided</span> <span class="n">by</span> <span class="mi">100</span> <span class="n">produces</span> <span class="o">-</span><span class="mf">1.000000</span><span class="err">对应的代码是：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">c</span> <span class="n">case4</span><span class="mf">.5</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">f1</span> <span class="o">=</span> <span class="n">i2</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%i divided by 100 produces %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i2</span><span class="p">,</span><span class="n">f1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">这段代码看起来仅仅只是一个简单的除法表达式，但是实际上很多人都会猜错它的打印结果，大多数初学</span><span class="n">C</span><span class="err">的人都会认为这个会输出</span><span class="o">-</span><span class="mf">1.500000</span><span class="err">，真实的情况却是</span><span class="o">-</span><span class="mf">1.000000</span><span class="err">，这其实是因为</span><span class="n">C</span><span class="err">语言中的整数除法规则导致的，这个规则规定了两个整数相除时，其余数将会被丢弃，即使我们将运算结果保存在一个浮点数中也是一样！</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">第四条</span><span class="o">-</span><span class="mi">150</span> <span class="n">divided</span> <span class="n">by</span> <span class="mf">100.0</span> <span class="n">produces</span> <span class="o">-</span><span class="mf">1.500000</span><span class="err">对应的代码是：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">c</span> <span class="n">case4</span><span class="mf">.5</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">f2</span> <span class="o">=</span> <span class="n">i2</span> <span class="o">/</span> <span class="mf">100.0</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%i divided by 100.0 produces %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i2</span><span class="p">,</span><span class="n">f2</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">这段代码看起来跟刚才的没有什么区别但是它的结果却是我们想要的</span><span class="o">-</span><span class="mf">1.500000</span><span class="err">，这是因为这不是两个整数相除，而是一个整数和一个浮点数相除，所以保留了小数位！</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">第五条</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">-</span><span class="mi">150</span> <span class="n">divided</span> <span class="n">by</span> <span class="mi">100</span> <span class="n">produces</span> <span class="o">-</span><span class="mf">1.500000</span><span class="err">对应的代码是：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">c</span> <span class="n">case4</span><span class="mf">.5</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">f2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="n">i2</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;(float) %i divided by 100 produces %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i2</span><span class="p">,</span><span class="n">f2</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">这段代码使用了类型转换符临时的转换了</span><span class="n">i2</span><span class="err">的类型所以结果仍然是</span><span class="o">-</span><span class="mf">1.500000</span><span class="err">！</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">注意：类型转换符仅仅是临时的转换了变量的类型，并不是永久的更改了变量的类型！</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="mf">2.</span><span class="err">习题</span><span class="mf">4.4</span> <span class="err">利用下面给出的公式，编写一个程序，将华氏（</span><span class="n">F</span><span class="err">）</span><span class="mi">27</span><span class="err">度换算成摄氏度（</span><span class="n">C</span><span class="err">）。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">C</span> <span class="o">=</span> <span class="err">（</span><span class="n">F</span> <span class="o">-</span> <span class="mi">32</span><span class="err">）</span><span class="o">/</span> <span class="mf">1.8</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">讲解：</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">这道题要注意变量</span><span class="n">C</span><span class="err">的类型是</span><span class="kt">float</span><span class="err">而不是</span><span class="kt">int</span><span class="err">（从表达式中的</span><span class="mf">1.8</span><span class="err">可以看出来，案例</span><span class="mf">4.5</span><span class="err">有讲！）</span><span class="p">,</span><span class="err">答案代码如下：</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span> <span class="n">c</span> <span class="n">prog4</span><span class="mf">.4</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">F</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>    <span class="n">F</span> <span class="o">=</span> <span class="mi">27</span><span class="p">;</span>
</span><span class='line'>    <span class="n">C</span> <span class="o">=</span> <span class="err">（</span><span class="n">y</span> <span class="o">-</span> <span class="mi">32</span><span class="err">）</span><span class="o">/</span> <span class="mf">1.8</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Fahrenheit</span> <span class="o">%</span><span class="n">i</span> <span class="n">degrees</span> <span class="n">conversion</span> <span class="k">for</span> <span class="n">centigrade</span> <span class="o">%</span><span class="n">f</span> <span class="n">degrees</span><span class="o">!</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span><span class="n">F</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="mf">3.</span><span class="err">习题</span><span class="mf">4.6</span> <span class="err">书写程序，计算下面多项式的值</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">X</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">X</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">6</span><span class="err">，</span><span class="n">X</span> <span class="o">=</span> <span class="mf">2.55</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>     <span class="o">*</span> <span class="err">讲解：</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>         <span class="o">*</span> <span class="err">这道题跟刚才那道一样，主要是注意</span><span class="n">X</span><span class="err">是</span><span class="kt">float</span><span class="err">型的所以这个表达式的值也是</span><span class="kt">float</span><span class="err">型的</span><span class="p">,</span><span class="err">答案代码如下：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">c</span> <span class="n">prog4</span><span class="mf">.6</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="mf">2.55</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="mi">3</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">5</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="mi">3</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">5</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">x</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">2</span> <span class="o">+</span><span class="mi">6</span> <span class="o">=</span> <span class="o">%</span><span class="n">f</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="mf">4.</span><span class="err">习题</span><span class="mf">4.7</span> <span class="err">编写程序，计算下面表达式的值，并用指数形式显示结果。</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="err">（</span><span class="mf">3.31</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">-</span> <span class="mi">8</span> <span class="o">*</span><span class="err">２</span><span class="p">.</span><span class="err">０１　×</span><span class="mi">10</span> <span class="o">-</span> <span class="mi">7</span><span class="err">）</span><span class="o">/</span> <span class="err">（</span><span class="mf">7.16</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">-</span> <span class="mi">6</span> <span class="o">+</span> <span class="mf">2.01</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">-</span> <span class="mi">8</span><span class="err">）</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>     <span class="o">*</span> <span class="err">讲解：</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>         <span class="o">*</span> <span class="err">这道题主要的难点是考你知不知道如何使用指数形式显示结果，答案代码如下：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">c</span> <span class="n">prog4</span><span class="mf">.7</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">answer</span><span class="p">;</span>
</span><span class='line'>    <span class="n">answer</span> <span class="o">=</span> <span class="p">(</span><span class="mf">3.31</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">-</span> <span class="mi">8</span> <span class="o">*</span> <span class="mf">2.01</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">-</span> <span class="mi">7</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mf">7.16</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">-</span> <span class="mi">6</span> <span class="o">+</span> <span class="mf">2.01</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">-</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;(3.31 * 10 - 8 * 2.01 * 10 - 7) / (7.16 * 10 - 6 + 2.01 * 10 - 8) = %e</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">answer</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="mf">5.</span><span class="err">习题</span><span class="mf">4.8</span> <span class="err">给出整数</span><span class="n">i</span><span class="err">和</span><span class="n">j</span><span class="err">，为了计算刚好比</span><span class="n">i</span><span class="err">大的下一个能整除</span><span class="n">j</span><span class="err">的整数，我们可以使用下面的公式：</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="n">Next_multiple</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">%</span> <span class="n">j</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="err">编写一个程序，计算当</span><span class="n">i</span><span class="err">和</span><span class="n">j</span><span class="err">等于下面给出的值的时候，下一个能整除</span><span class="n">j</span><span class="err">的数</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">365</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">12258</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">23</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">*</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">996</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>     <span class="o">*</span> <span class="err">讲解：</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>         <span class="o">*</span> <span class="err">这道题目主要是考察了单个变量多个值（在没有学习判断语句和如何输入的情况下），答案代码如下：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">c</span> <span class="n">prog4</span><span class="mf">.8</span><span class="p">.</span><span class="n">c</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-stdioh&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">next_multiple</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//    next_multiple = i + j - i % j;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">365</span><span class="p">;</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'>    <span class="n">next_multiple</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">%</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">i</span> <span class="n">is</span> <span class="o">%</span><span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="n">is</span> <span class="o">%</span><span class="n">i</span><span class="p">,</span><span class="n">next_multiple</span> <span class="o">=</span> <span class="o">%</span><span class="n">i</span><span class="o">!</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">next_multiple</span><span class="p">);</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">12258</span><span class="p">;</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>    <span class="n">next_multiple</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">%</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">i</span> <span class="n">is</span> <span class="o">%</span><span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="n">is</span> <span class="o">%</span><span class="n">i</span><span class="p">,</span><span class="n">next_multiple</span> <span class="o">=</span> <span class="o">%</span><span class="n">i</span><span class="o">!</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">next_multiple</span><span class="p">);</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">996</span><span class="p">;</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="n">next_multiple</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">%</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">i</span> <span class="n">is</span> <span class="o">%</span><span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="n">is</span> <span class="o">%</span><span class="n">i</span><span class="p">,</span><span class="n">next_multiple</span> <span class="o">=</span> <span class="o">%</span><span class="n">i</span><span class="o">!</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">next_multiple</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>至此第三章和第四章的coding练习题就搞定了，下一篇我们将继续学习《Programming in C》后面的内容，敬请期待！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【龍馬君从零开始学C语言系列之一】Programming in C：第一至第四章（理论笔记）]]></title>
    <link href="http://juliajia.github.io/blog/20150708/programming-in-c-01.html"/>
    <updated>2015-07-08T20:39:12+08:00</updated>
    <id>http://juliajia.github.io/blog/20150708/programming-in-c-01</id>
>>>>>>> 674d77a10cec5018d88a39581245c4fd5a92f5f8
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、入门</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、基础知识</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">三、编译并运行第一个程序</a></li>
  <li><a href="#include-stdioh" id="markdown-toc-include-stdioh">include <stdio.h></stdio.h></a></li>
  <li><a href="#include-stdioh-1" id="markdown-toc-include-stdioh-1">include <stdio.h></stdio.h></a>    <ul>
      <li><a href="#section-3" id="markdown-toc-section-3">四、变量、数据类型和算数表达式</a></li>
    </ul>
  </li>
</ul>

<h3 id="section">一、入门</h3>
<blockquote>
  <ul>
    <li>1.学习C需要尽可能多的去实验</li>
    <li>2.代码可读性很重要</li>
  </ul>
</blockquote>

<h3 id="section-1">二、基础知识</h3>
<blockquote>
  <ul>
    <li>1.程序设计
      <ul>
        <li>1.计算机系统能够执行的基本指令的集合，我们称之为计算机的指令集</li>
        <li>2.用来解决某个具体问题的计算机指令集和，我们称之为计算机程序</li>
        <li>3.用来解决某个具体问题的方法，我们称之为算法</li>
        <li>4.使用计算机解决制定问题的流程是：
          <ul>
            <li>step 1：找到解决该问题的方法，也就是找到算法</li>
            <li>step 2：在用一段计算机程序去表达/实现这个算法
<!--more--></li>
          </ul>
        </li>
      </ul>
    </li>
    <li>2.高级编程语言
      <ul>
        <li>1.使用高级编程语言，我们不再需要了解具体计算机系统的结构。</li>
        <li>2.高级编程语言可移植性高</li>
        <li>3.高级编程语言需要编译器—一个用来将高级编程语言编写的程序翻译成特定计算机系统能理解的机器指令的程序。</li>
      </ul>
    </li>
    <li>3.操作系统
      <ul>
        <li>1.操作系统被用来控制计算机系统所有操作的程序</li>
        <li>2.操作系统必须管理计算机的所有资源并负责运行所有的程序</li>
      </ul>
    </li>
    <li>4.编译程序
      <ul>
        <li>1.编译程序的基本步骤：
          <ul>
            <li>step 1：用文本编辑器将C语言编写的程序输入到计算机系统的文件中。</li>
            <li>step 2：使用gcc prog1.c的命令告诉计算机开始编译</li>
            <li>step 3：编译器收到编译指示后，它首先检查源程序的每一条语句，看他是否符合语言的语法和词法。如果有错误，编译器会报错给用户并停止运行。</li>
            <li>step 4：如果编译器没有发现任何的语法和词法的错误，它将会把高级编程语言编写的源程序翻译为较低级的形式—汇编语言程序</li>
            <li>step 5：然后再将汇编语言程序翻译为实际的机器指令并生成目标文件（通常.o结尾）</li>
            <li>step 6：生成目标文件以后编译器会执行连接（连接的主要作用是将目标代码转化为具体的计算机系统上实际的可执行程序）的操作</li>
            <li>step 7：连接器会把刚刚生成的可执行代码保存在系统的可执行文件中（通常.out结尾）
  至此编译程序的完整流程就走完了</li>
          </ul>
        </li>
        <li>2.程序运行时，计算机会按照顺序执行程序中的指令，除非遇到中止/挂起等指令。</li>
      </ul>
    </li>
    <li>5.解释型语言
      <ul>
        <li>1.python就是一门典型的解释型语言</li>
        <li>2.解释型语言没有编译器只有解释器，它通过解释器一边分析源程序一边执行。因此解释型程序会比编译型程序执行得慢，但是解释型语言调试起来容易一些。</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="section-2">三、编译并运行第一个程序</h3>
<blockquote>
  <ul>
    <li>1.万年“Hello World!”
``` c prog1.c</li>
  </ul>
</blockquote>

<h1 id="include-stdioh">include <stdio.h></stdio.h></h1>

<p>int main(void)
{
    printf(“Hello World!\n”);</p>

<pre><code>return 0; } ```
</code></pre>

<blockquote>
  <ul>
    <li>2.编译prog1.c
      <ul>
        <li>gcc prog1.c -o prog1</li>
      </ul>
    </li>
    <li>3.运行prog1
      <ul>
        <li>prog1</li>
      </ul>
    </li>
    <li>4.prog1代码解析
      <ul>
        <li>1.#include <stdio.h>
</stdio.h>          <ul>
            <li>stdio.h是标准输入输出头文件，里面有很多已经编写好的标准函数提供给程序员使用，有点像python的模块。</li>
          </ul>
        </li>
        <li>2.int main(void)
          <ul>
            <li>定义了一个名为main的函数（在C语言中，main就是主函数），并定义了这个函数的type是整型。</li>
          </ul>
        </li>
        <li>3.{}
          <ul>
            <li>C语言通过{}来表明函数块范围。</li>
          </ul>
        </li>
        <li>4.void
          <ul>
            <li>表示函数main不需要任何参数</li>
          </ul>
        </li>
        <li>5.printf();
          <ul>
            <li>printf函数是C语言的一个标准库函数，这个函数把传递给它的参数打印到屏幕上。</li>
            <li>\n是换行符</li>
          </ul>
        </li>
        <li>6.return 0;
          <ul>
            <li>表示函数结束并返回一个0值作为结束状态。</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>5.显示变量的值
      <ul>
        <li>1.prog2代码解析
          <ul>
            <li>1.int a;
              <ul>
                <li>定义一个名为a的整型变量</li>
              </ul>
            </li>
            <li>2.a = 50 + 25;
              <ul>
                <li>这个表达式的含义是给变量a赋值</li>
              </ul>
            </li>
            <li>3.%i
              <ul>
                <li>%i表示这里使用一个整型的变量值，变量值由,号后面的参数提供。</li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<p>``` c prog2.c</p>

<h1 id="include-stdioh-1">include <stdio.h></stdio.h></h1>
<p>int main(void)
{
    int a;
    a = 50 + 25;
    printf(“The sum of 50 and 25 is %i\n”, a);</p>

<pre><code>return 0; } ```
</code></pre>

<blockquote>
  <ul>
    <li>6.注释
      <ul>
        <li>1./* 我是注释 */
          <ul>
            <li>我能换行注释</li>
          </ul>
        </li>
        <li>2.//我也是注释
          <ul>
            <li>我只能单行注释</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="section-3">四、变量、数据类型和算数表达式</h3>
<blockquote>
  <ul>
    <li>1.使用变量
      <ul>
        <li>1.合法的变量名
          <ul>
            <li>1.字母或下划线开头</li>
            <li>2.由字母、下划线以及数字0-9组成</li>
            <li>3.不能使用保留关键字</li>
          </ul>
        </li>
        <li>2.最好使用有意义的长短合适的变量名</li>
      </ul>
    </li>
    <li>2.数据类型与常量
      <ul>
        <li>1.整型—int（%i）
          <ul>
            <li>1.long—长整型（目前为止long int跟int其实没有差别都是32位）</li>
            <li>2.long long—超长整型支持64位</li>
            <li>3.short—短整型（16位以上）
              <ul>
                <li>short整型没有常量表达式，只能通过普通整型数的格式化输入符号前面放一个字母h，比如%hi来进行输出。（了解即可，这种东西现在完全没用武之地。。。。）</li>
              </ul>
            </li>
          </ul>
        </li>
        <li>2.其他数据类型—float/double/char/_bool
          <ul>
            <li>1.float—用来储存浮点数（%g）</li>
            <li>2.double—-用来储存双精度浮点数（%g）</li>
            <li>3.char—-用来储存单个字符（%c）</li>
            <li>4._bool—用来储存布尔值（i%）</li>
          </ul>
        </li>
        <li>3.常量
          <ul>
            <li>在C语言中，任何数字，单个字符或者字符串都被看作是常量。
书里面做了一个很有意思的数据类型实验，等实验篇的时候我们来详细的看一看！</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【从零开始部署octopress系列之二】octopress定制化部署(1)]]></title>
<<<<<<< HEAD
    <link href="http://www.juliajia.com/blog/20150701/octopress-02.html"/>
    <updated>2015-07-01T15:33:48+08:00</updated>
    <id>http://www.juliajia.com/blog/20150701/octopress-02</id>
=======
    <link href="http://juliajia.github.io/blog/20150701/octopress-02.html"/>
    <updated>2015-07-01T15:33:48+08:00</updated>
    <id>http://juliajia.github.io/blog/20150701/octopress-02</id>
>>>>>>> 674d77a10cec5018d88a39581245c4fd5a92f5f8
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、前提说明</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、基本配置的修改</a></li>
</ul>

<h3 id="section">一、前提说明</h3>
<blockquote>
  <ul>
    <li>git bash在octopress目录下操作</li>
    <li>所有文件必须是UTF8不带BOM格式的！可以使用notepad++进行转换。</li>
    <li>以后我们将把octopress目录称为根（/）目录</li>
    <li>//后面的内容表示注释</li>
    <li>后面的步骤里如没有特殊说明将参照以上说明</li>
  </ul>
</blockquote>

<!--more-->

<h3 id="section-1">二、基本配置的修改</h3>
<blockquote>
  <ul>
    <li>1.修改域名、作者以及网站标题
      <ul>
        <li>修改配置文件/_config.yml
          <ul>
            <li>url: http://www.juliajia.com        //这里填写你的站点地址也就是域名</li>
            <li>title: JuliaJia’s coding paradise    //这里填写你站点的名称</li>
            <li>subtitle: 凤凰涅槃，三年不飞三年不鸣，要飞一飞冲天，要鸣一鸣惊人！      //这里填写站点的描述，但是一般大家都喜欢写喜欢的名言或者自己的志向</li>
            <li>author: Julia Jia     //这里写站点的作者或者说博主姓名</li>
            <li>keywords: 编程 大数据 算法 python C C++ 机器学习 深度学习 hadoop spark JAVA scala  //这里填写你这个站点的关键字，方便搜索引擎来爬。</li>
            <li>description: 这里是JuliaJia的禅修之地，主要潜心研究机器学习、深度学习以及大数据有关的所有技术，也写一些自己的感悟体会和生活趣事儿。   //对这个博客站点进行简单的描述，这里的内容也是给搜索引擎看的。</li>
            <li>这里需要注意的是，所有的冒号必须是英文冒号，并且冒号后面一定要有一个空格！切记！</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>2.修改文章链接形式
      <ul>
        <li>修改配置文件/_config.yml
          <ul>
            <li>permalink: /blog/:year:month:day/:title.html       //这里填写博客页面的web链接格式</li>
            <li>这么修改了以后页面链接就不会显得层级很多了</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>3.修改markdown文件后缀
      <ul>
        <li>octopress默认日志文件的后缀是markdown，我们可以修改配置文件让这个后缀更简短一些，还能针对文件的不同用途设定不同的后缀</li>
        <li>修改配置文件/rakefile
          <ul>
            <li>new_post_ext = “md”      //设置post文件后缀为md</li>
            <li>new_page_ext = ‘html’    //设置page文件后缀为html</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>4.修改默认markdown解释器
      <ul>
        <li>修改配置文件/Gemfile
          <ul>
            <li>在文件末尾添加一行：
              <ul>
                <li>gem ‘kramdown’</li>
              </ul>
            </li>
            <li>然后在git bash中执行命令：
              <ul>
                <li>bundle install</li>
              </ul>
            </li>
          </ul>
        </li>
        <li>修改配置文件/_config.yml
          <ul>
            <li>把以下内容删除：
              <ul>
                <li>markdown: rdiscount</li>
                <li>rdiscount:
                  <ul>
                    <li>extensions:
                      <ul>
                        <li>autolink</li>
                        <li>footnotes</li>
                        <li>smart</li>
                      </ul>
                    </li>
                  </ul>
                </li>
              </ul>
            </li>
            <li>然后再添加下面这句话：
              <ul>
                <li>markdown: kramdown</li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>5.添加MathJax支持
      <ul>
        <li>修改配置文件/source/_includes/custom/head.html
          <ul>
            <li>添加如下代码
<code>html head.html
&lt;!-- MathJax --&gt;
&lt;script type="text/x-mathjax-config"&gt;
MathJax.Hub.Config({
  tex2jax: {
inlineMath: [ ['$','$'], ["\\(","\\)"] ],
processEscapes: true
  }
});
&lt;/script&gt;
&lt;script type="text/x-mathjax-config"&gt;
  MathJax.Hub.Config({
tex2jax: {
  skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
}
  });
&lt;/script&gt;
&lt;script type="text/x-mathjax-config"&gt;
  MathJax.Hub.Queue(function() {
  var all = MathJax.Hub.getAllJax(), i;
  for(i=0; i &lt; all.length; i += 1) {
  all[i].SourceElement().parentNode.className += ' has-jax';
  }
  });
&lt;/script&gt;
&lt;script type="text/javascript"
 src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;
&lt;/script&gt;
</code></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<p>至此，博客的基本配置就完成了，当然离最终的样子还差很多，不过饭要一口一口的吃，事儿要一件一件的做，我们下一篇开始讲解导航栏和侧边栏的定制。</p>
]]></content>
  </entry>
  
<<<<<<< HEAD
  <entry>
    <title type="html"><![CDATA[【从零开始部署octopress系列之一】octopress安装与部署]]></title>
    <link href="http://www.juliajia.com/blog/20150630/octopress-01.html"/>
    <updated>2015-06-30T16:43:07+08:00</updated>
    <id>http://www.juliajia.com/blog/20150630/octopress-01</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一、写这个系列的起因</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">二、部署之前需要做的事情</a></li>
  <li><a href="#octopress" id="markdown-toc-octopress">三、octopress安装与部署</a></li>
</ul>

<h3 id="section">一、写这个系列的起因</h3>
<p>接触octopress是源于一直以来我就想有个自己的博客，但是一直不想四处找稳定的空间（X宝的坑太多，国外的太贵）所以也就作罢，直到后来偶然在知乎上搜到一篇文章里面讲到如何利用github建立自己的博客，我多年想建个人博客的愿望又被激了起来，于是乎就开始了漫长的折腾。</p>

<p>起先本来是用hexo不过我不喜欢那样的feel，当然萝卜青菜各有所爱，hexo有它自身的优势只不过我不喜欢罢了，后来翻来覆去的查找各种博客模板最终google到了octopress，刚开始部署按照教程去走也还算顺利，在本地看到了自带模板的模样，直觉告诉我 I like it!
于是乎就喜滋滋的开始了octopress折腾之路，一路上披荆斩棘解决各种坑，几乎把google和百度都查了个遍，以至于凡是带octopress关键字的我都进去瞅过，终于有了现在这个博客，虽然还是很简陋，但是以我从来没有接触ruby（弄这个博客之前ruby是什么我都不知道。。。）、git（知道，但是从来没用过。。。）、html、css、JavaScript的情况来看，这已经是我能做的最好看的样子了，嘿嘿嘿！
<!--more--></p>

<p>介于我折腾的如此痛苦（部署期间我翻阅了各种跟octopress相关的博客，但是要么写的不全面，要么是在MAC下或者linux下的部署步骤不适合windows，要么插件按照他写的步骤完全没法用—年代久远等因素），所以我想把我折腾的整个过程总结出来，写一个全面的系列，这样一来方便我自己后续查阅，二来给后面用octopress的人一个参考，你按照我的步骤去做就能做出我现在博客的样子，省去了很多折腾的时间（虽然折腾的过程也很有乐趣，嘿嘿）以上就是我为什么要写这个系列的原因。</p>

<h3 id="section-1">二、部署之前需要做的事情</h3>

<blockquote>
  <ul>
    <li><code>step 1：github_page建立</code>
      <ul>
        <li><code>首先你得有个github账号（github.com 不要问我怎么注册的。。。。如果这都要人教，我觉得你可以告别使用octopress了）</code></li>
        <li><code>然后你要创建一个名为yourname.github.io的库，这里的yourname一定要确保跟你用户名一模一样。</code></li>
        <li><code>最后到https://msysgit.github.io/下载一个git进行安装（同样不要问我怎么安装。。。。）</code></li>
      </ul>
    </li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>step 2：安装Ruby</code>
      <ul>
        <li><code>到http://rubyinstaller.org/downloads/下载rubyinstallers以及其对应版本的DevKit</code></li>
        <li><code>先安装rubyinstall并设置好环境变量（正常情况下，你安装完毕他会自动部署好环境变量，但是有的时候不生效，你可以在PATH结尾处再弄一个，记住一定要;号结尾），然后把DevKit解压到C盘下，并设置环境变量</code></li>
        <li><code>如果你随便打开一个文件夹，空白处右键打开git bash输入ruby然后按下tab键能自动出来ruby.exe的选项，证明你环境变量设置成功了。</code></li>
        <li><code>在git bash里进入DevKit的目录进行DevKit的安装</code>
          <ul>
            <li><code>cd /c/devkit</code></li>
            <li><code>ruby.exe dk.rb init</code></li>
            <li><code>ruby.exe dk.rb install</code></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li><code>step 3：购买域名并绑定（可选）</code>
      <ul>
        <li><code>我的域名是在goddady买的，安全，而且可以使用支付宝（不过前提是不能使用超低折扣的折扣码，目前中国人能使用的折扣码只有8.99美元/年的）。别问我折扣码怎么得，自行百度。</code>
          <ul>
            <li><code>补充一些注意事项：</code>
              <ul>
                <li><code>注册时用户填写信息时一定要输入正确的邮箱名字，否则修改十分麻烦。</code></li>
                <li><code>买完域名之后一定要记得去自己的邮箱查看激活邮件，否则域名激活不了。</code></li>
              </ul>
            </li>
          </ul>
        </li>
        <li><code>买了域名以后记得到my account下去查看域名是否已经在你账户下</code></li>
        <li><code>DNS服务设置可以参考这个帖子http://www.admin5.com/article/20131014/527502.shtml</code></li>
        <li><code>DNS智能解析绑定</code>
          <ul>
            <li><code>到DNSPOD（https://www.dnspod.cn/）上点击产品中心里的域名解析</code></li>
            <li><code>点击添加域名然后填入你在goddady购买的域名</code></li>
            <li><code>需要注意的点：</code>
              <ul>
                <li><code>CNAME的记录值后面有个.号，这个一定要有，要注意！</code></li>
                <li><code>A的记录值要照着写，这个是github的地址。</code></li>
                <li><code>另外默认存在的NS的记录值要原封不动的填到goddady的DNS绑定服务器选项里，前面的帖子里有写照着填就好了。</code></li>
              </ul>
            </li>
            <li><code>具体设置可以参考下图：</code></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</blockquote>

<p><img src="http://7xjw6q.com1.z0.glb.clouddn.com/DNS解析设置.png"></p>

<h3 id="octopress">三、octopress安装与部署</h3>
<blockquote>
  <ul>
    <li><code>下载标准的octopress模板：</code>
      <ul>
        <li><code>git clone git://github.com/imathis/octopress.git octopress</code></li>
        <li><code>gem install bundler</code></li>
      </ul>
    </li>
    <li><code>移除国外ruby源添加淘宝ruby源：</code>
      <ul>
        <li><code>gem sources --remove https://rubygems.org/</code></li>
        <li><code>gem sources -a http://ruby.taobao.org/</code></li>
        <li><code>gem sources -l</code></li>
        <li><code>一定要确保只有一个源</code></li>
      </ul>
    </li>
    <li><code>安装各种关联包</code>
      <ul>
        <li><code>bundle install</code>
          <ul>
            <li><code>这里一步可能会持续很长时间，因为会报各种关联包缺失，你按照他的提示安装关联包即可，一直装到bundle install提示安装完成为止</code></li>
          </ul>
        </li>
      </ul>
    </li>
    <li><code>安装octopress默认主题</code>
      <ul>
        <li><code>rake install</code></li>
      </ul>
    </li>
    <li><code>设置github_page库地址</code>
      <ul>
        <li><code>rake setup_github_pages</code>
          <ul>
            <li><code>这里填写的url是你自己的page库，格式如下：</code>
              <ul>
                <li><code>git@github.com:yourname/yourname.github.io.git</code></li>
              </ul>
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li><code>设置CNAME</code>
      <ul>
        <li><code>echo '你的域名' &gt;&gt; source/CNAME      //如果你有自己的域名可以这样操作绑定到github的二级域名上。</code></li>
      </ul>
    </li>
    <li><code>生成静态页面</code>
      <ul>
        <li><code>rake generate</code></li>
      </ul>
    </li>
    <li><code>本地测试</code>
      <ul>
        <li><code>rake preview</code></li>
        <li><code>打开本地浏览器访问http://localhost:4000，如果能出来octopress默认页面就证明octopress本地库部署OK并且静态页面生成没有问题。</code></li>
      </ul>
    </li>
    <li><code>push静态页面到你的github_page库上</code>
      <ul>
        <li><code>rake deploy</code></li>
      </ul>
    </li>
    <li><code>备份本地octopress库到github_page库的source分支上</code>
      <ul>
        <li><code>git add .</code></li>
        <li><code>git commit -am "YY-MM-DD-hh:mm"</code></li>
        <li><code>git push origin source</code></li>
      </ul>
    </li>
    <li><code>注意：以上的操作都要在octopress目录下做</code></li>
    <li><code>访问你的域名看看是否能正常访问（域名绑定和解析需要等一段时间）</code></li>
  </ul>
</blockquote>

<p>至此，整个octopress的安装与部署就完成了。但是默认的界面比较土，而且功能单一，所以后面将会逐步逐步的去给它添加插件以及修改框架，把它变成属于你的独一无二的博客。</p>
]]></content>
  </entry>
  
=======
>>>>>>> 674d77a10cec5018d88a39581245c4fd5a92f5f8
</feed>
